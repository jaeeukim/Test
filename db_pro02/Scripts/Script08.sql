/*
 * 1. 관리자 계정으로 전환하여 다음의 권한을 가지는 사용자 생성
 * 		A. dev01 계정 생성, RESOURCE, CONNECT, CREATE SESSION 권한부여
 * 		B. dev02 계정 생성, CONNECT, CREATE SESSION, INSERT, UPDATE, DELETE 권한부여
 * 		C. devadmin 계정생성, RESOURCE, CONNECT, CREATE SESSION, INSERT, UPDATE, DELETE 권한부여
 * 위 권한을 부여 한 후 확인까지
 */
CREATE USER dev01 IDENTIFIED BY dev01;
GRANT RESOURCE, CONNECT TO dev01;
GRANT CREATE SESSION TO dev01;

CREATE USER dev02 IDENTIFIED BY dev02;
GRANT CONNECT TO dev02;
GRANT INSERT ANY TABLE, UPDATE ANY TABLE, DELETE ANY TABLE TO dev02;
GRANT CREATE SESSION TO dev02;

CREATE USER devadmin IDENTIFIED BY devadmin;
GRANT RESOURCE, CONNECT TO devadmin;
GRANT INSERT ANY TABLE, UPDATE ANY TABLE, DELETE ANY TABLE TO devadmin;
GRANT CREATE SESSION, CREATE VIEW TO devadmin;
ALTER USER devadmin quota 10M ON USERS;





SELECT * FROM ALL_USERS WHERE USERNAME LIKE 'DEV%';
SELECT * FROM DBA_SYS_PRIVS WHERE GRANTEE LIKE 'DEV%';
SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTEE LIKE 'DEV%';
SELECT PRIVILEGE FROM DBA_SYS_PRIVS WHERE GRANTEE = 'DEV01';
SELECT PRIVILEGE FROM DBA_SYS_PRIVS WHERE GRANTEE = 'DEV02';
SELECT PRIVILEGE FROM DBA_SYS_PRIVS WHERE GRANTEE = 'DEVADMIN';


-- 계정에 부여한 롤(Role) 확인 (관리자 계정으로 확인 바람)
SELECT GRANTED_ROLE FROM DBA_ROLE_PRIVS WHERE GRANTEE = 'DEV01';
SELECT GRANTED_ROLE FROM DBA_ROLE_PRIVS WHERE GRANTEE = 'DEV02';
SELECT GRANTED_ROLE FROM DBA_ROLE_PRIVS WHERE GRANTEE = 'DEVADMIN';
/*
 * 2. devadmin 계정으로 전환하여 다음의 작업을 수행
 * 		A. 회원관리를 위한 테이블생성(USER_ACCOUNT)
 * 		   (식별값, 회원아이디, 회원패스웓, 회원명, 나이, 성별 정보 관리 컬럼 포함)
 * 		B. 회원관리에서 사용하는 식별값은 SEQUENCE 객체를 이용하도록한다.
 * 		C. 회원 정보를 별도로 관리하기 위한 테이블(INFO_ACCOUNT)생성
 *  	   식별값, 이메일주소, 주소, 전화번호 정보 관리 컬럼 포함
 * 		   식별값은 회원관리의 식별값과 외래키 관계
 */
CREATE TABLE USER_ACCOUNT(
	  DNUM    NUMBER        CONSTRAINT PK_USER_ACCOUNT_DNUM     PRIMARY KEY  --식별값
	, ID	  VARCHAR2(30)  CONSTRAINT NN_USER_ACCOUNT_ID       NOT NULL     --아이디
	, PW      VARCHAR2(20)  CONSTRAINT NN_USER_ACCOUNT_PW       NOT NULL     --비밀번호
	, NAME    VARCHAR2(30)  CONSTRAINT NN_USER_ACCOUNT_NAME     NOT NULL     --이름
	, AGE     NUMBER(3) 	CONSTRAINT CK_USER_ACCOUNT_AGE      CHECK(AGE BETWEEN 0 AND 199)
	, GENDER  VARCHAR2(2)   CONSTRAINT CK_USER_ACCOUNT_GENDER   CHECK(GENDER IN ('M', 'F'))
);

CREATE SEQUENCE USER_ACCOUNT_SEQ NOCACHE;


CREATE TABLE INFO_ACCOUNT(
	  DNUM          NUMBER         CONSTRAINT PK_INFO_ACCOUNT_DNUM PRIMARY KEY  --식별값
	, EMAIL         VARCHAR2(30)
	, ADDRESS       VARCHAR2(100) 
	, PHONE_NUMBER  VARCHAR2(20)
	, CONSTRAINT FK_INFO_ACCOUNT_ID FOREIGN KEY(DNUM) REFERENCES USER_ACCOUNT(DNUM)
);

SELECT * FROM USER_ACCOUNT;
SELECT * FROM INFO_ACCOUNT;
SELECT * FROM ALL_ALL_TABLES WHERE OWNER = 'DEVADMIN' AND TABLE_NAME IN('USER_ACCOUNT', 'INFO_ACCOUNT');
SELECT * FROM ALL_TAB_COLUMNS WHERE OWNER = 'DEVADMIN' AND TABLE_NAME IN('USER_ACCOUNT', 'INFO_ACCOUNT');
SELECT * FROM USER_CONSTRAINTS WHERE OWNER = 'DEVADMIN' AND TABLE_NAME IN('USER_ACCOUNT', 'INFO_ACCOUNT');
SELECT * FROM USER_ACCOUNT_SEQ;

/*
 * 3. 2번에서 생성한 테이블에 데이터를 추가하기 위한 INSERT 구문 3개만 만들어 데이터 추가
 * 4. 2번에서 생성한 테이블을 다른 개발자가 쉽게 볼 수 있도록 VIEW테이블 생성 (V_USER_INFO)
 *    해당 뷰 테이블에는 회원아이디, 회원명, 나이, 성별, 이메일주소, 주소, 전화번호만 보이도록한다.
 * 	  성별을 보여줄때 'F'는 '여성', 'M'은 '남성'으로 변환
 */

INSERT INTO USER_ACCOUNT VALUES(USER_ACCOUNT_SEQ.NEXTVAL, 'user1', 'user1', '사용자1', 23, 'F');
INSERT INTO INFO_ACCOUNT VALUES(USER_ACCOUNT_SEQ.CURRVAL, NULL, NULL, NULL);
INSERT INTO USER_ACCOUNT VALUES(USER_ACCOUNT_SEQ.NEXTVAL, 'user2', 'user2', '사용자2', 25, 'F');
INSERT INTO INFO_ACCOUNT VALUES(USER_ACCOUNT_SEQ.CURRVAL, NULL, NULL, NULL);
INSERT INTO USER_ACCOUNT VALUES(USER_ACCOUNT_SEQ.NEXTVAL, 'user3', 'user3', '사용자3', 21, 'M');
INSERT INTO INFO_ACCOUNT VALUES(USER_ACCOUNT_SEQ.CURRVAL, NULL, NULL, NULL);

CREATE OR REPLACE VIEW V_USER_INFO
	AS SELECT A.ID
			, A.NAME
			, A.AGE
			, DECODE(GENDER, 'M', '남성', 'F', '여성') AS 성별
			, B.EMAIL
			, B.ADDRESS
			, B.PHONE_NUMBER
			FROM USER_ACCOUNT A
			JOIN INFO_ACCOUNT B
			  ON A.DNUM = B.DNUM;

SELECT * FROM V_USER_INFO;
SELECT * FROM USER_VIEWS;

